{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bytsizebio \u00b6 We aim to make short and simple bioinformatics tutorials. If you'd like to see a tutorial on a specific topic please suggest it here .","title":"Home"},{"location":"#bytsizebio","text":"We aim to make short and simple bioinformatics tutorials. If you'd like to see a tutorial on a specific topic please suggest it here .","title":"bytsizebio"},{"location":"tutorials/","text":".ipynb notebooks here will be converted to .md files (along with their images) and placed in the tutorials/docs/tutorials folder","title":"Index"},{"location":"tutorials/terminal_common_fastq_tasks/","text":"Common FASTQ file tasks \u00b6 FASTQ files are text files that contain biological sequences, usually nucleotides, and their associated quality scores. Often we'd like to perform various tasks on the files such as: extracting just the sequences, finding the reverse complement tl;dr In this tutorial we introduce more advanced ways to manipulate and interact with FASTQ files Downloading FASTQ files with curl \u00b6 We will use the curl command to download FASTQ files to our machine. curl is a command line tool that allows us to download files. It takes a URL as an argument and downloads the file to your local computer in the current directory. FASTQ files usually come in pairs, known as \"read 1\" and \"read 2\". This naming convention originates from the order in which the molecules in a sequencing machine are sequenced. 1 2 3 4 %%bash curl -Ls -o read1.fastq https://caltech.box.com/shared/static/fh81mkceb8ydwma3tlrqfgq22z4kc4nt.gz curl -Ls -o read2.fastq https://caltech.box.com/shared/static/ycxkluj5my7g3wiwhyq3vhv71mw5gmj5.gz ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 23:12 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 23:11 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data The curl command uses three options: -L tells curl to follow any redirects in case the file was moved, -s tells curl to not print any logging information (i.e. the command is silent), and the -o specifies the new name of the file to be saved to our machine. Printing out only sequences \u00b6 Often times we care only about the sequences in the FASTQ files and nothing else. We are tasked with converting the FASTQ file into just a file of sequences. Recall that a FASTQ file is comprised of sequences of molecules and associated metadata. Each molecule is represented by four lines: 1 2 3 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The first line is the molecule identifier, the second line is the actual sequence of the molecule, the third line starts with a + sign and provides optional information, and the fourth line is the quality score of the sequence. Note that the quality score must be the same length of the molecule. So we need to figure out a way to print the sequence (line 2) and every 4 lines after that. The awk command \u00b6 The awk command is a commandline tool for advanced processing of text files. It can perform many tasks and we will use it for printing out only the sequences from the FASTQ files. awk operates on a line-by-line basis and treats each line as a collection of \"columns\" separated by a \"separator\" such as a space, a comma, or a tab. In the simplest case we can print out every line input to awk by printing the 0th column: 1 awk '{print $0}' file.txt Let's use it on our FASTQ files. If you recall, a fastq file that has not been compressed with gzip is simply a text file. Since we don't want the entire contents of the file to be printed to the screen, we can limit the number of lines with the head command. 1 2 %%bash awk '{print $0}' read1.fastq | head -n 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The awk command also has a built-in variable called NR . This variable stores the current line number. We can also print it out: 1 2 %%bash awk '{print NR, $0}' read1.fastq | head -n 12 1 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 2 ACATCNGTCGAGAACGATCGTGTCCG 3 +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 4 AAAAA#EEEEEEEEEEEEEEEEEEEE 5 @SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 6 TCAGCNCCAACTGCTAGTCTTTCCCT 7 +SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 8 AAAAA#EEEEEE6EEEEEEEEEEEEE 9 @SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 10 TGAAANATCACGCGGTTCATCAGTAG 11 +SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 12 AAAAA#EEEAEEEEEEEAEEEEEEEE The modulo ( % ) operator \u00b6 Notice how the sequence of interest occurs on the 2nd line and then again on the 6th line and then again on the 10th line. The sequences are spaced four lines apart and start on line 2. We can be clever and print out only those lines using the modulo % operator. The modulo operator is the same as seen in python. Given two numbers a and b , the operation a%b first divides a by b and then returns the remainder. For example: 1 2 3 4 5 %%python a = 17 b = 4 print(f\"{a}/{b} = {a//b} with a remainder of {a%b}.\") print(f\"In other words: {b}*{a//b} + {a%b} = {a}.\") 17/4 = 4 with a remainder of 1. In other words: 4*4 + 1 = 17. To get every 4th line of the file we want to print out the lines when NR%4==0 . We can declare the condition to print the line by writing the condition before the {print} in the following way: 1 awk '(condition){print $0}' file.txt Let's try it on our file: 1 2 %%bash awk 'NR%4==0{print NR, $0}' read1.fastq | head -n 6 4 AAAAA#EEEEEEEEEEEEEEEEEEEE 8 AAAAA#EEEEEE6EEEEEEEEEEEEE 12 AAAAA#EEEAEEEEEEEAEEEEEEEE 16 AAAAA#EEEEEEEEEEEEEEEEEEEE 20 AAAAA#EEEEEEEEEEAEEEEEEEEE 24 AAA6A#EEEEAEEEAEE6EEEEEEEE Notice that this gives us the rows 4, 8, 12... , i.e. the quality score. We need to shift the condition by 2 so that we get the sequence instead: 1 2 %%bash awk 'NR%4==2{print NR, $0}' read1.fastq | head -n 6 2 ACATCNGTCGAGAACGATCGTGTCCG 6 TCAGCNCCAACTGCTAGTCTTTCCCT 10 TGAAANATCACGCGGTTCATCAGTAG 14 GCGCANCAGGCTACGATCGATCATGG 18 CTGATNCTCCTTTCTCATGGAGAATG 22 CGAGCNAAGTGAAGAGTGCGAAAGCC Saving the sequences to a file \u00b6 Now if we want to save this as a new file we can direct the stream of text to a new file like so: 1 2 %%bash awk 'NR%4==2{print $0}' read1.fastq > read1.txt Finding the reverse complement \u00b6 DNA (Dexoy-riboNucleic Acid) is a two-stranded biopolymer where each monormer is one of the four nucleotides Adenosine ( A ) Thymine ( T ) Guanine ( G ) Cytosine ( C ). The strands have a directionality, commonly called to as the 3' and 5' ends which refers to the position of the carbon atoms in the pentose-sugar-ring. The 5' -carbon usually has a phosphate group attached to it and the 3' -carbon end usually has a hydroxyl ( OH ) group group attached to it. The nucleotides bind complementarily and run anti-parallel to each other. Here is an example: 1 2 3 5' - A A T G G A C C T A C A C T G T C A - 3' | | | | | | | | | | | | | | | | | | 3' - T T A C C T G G A T G T G A C A G T - 5' Often bioinformaticians want to know the the reverse complement of a given sequence. Relevant commands \u00b6 To find the reverse complement we will use two commands, echo and tr . The echo command \u00b6 The echo command is a commandline tool that allows us to \"print\" whatever argument was supplied to it. For example: 1 2 %%bash echo \"Hello world\" Hello world The tr command \u00b6 The tr command is a commandline tool that is commonly referred to as the \"translate\" command. It will take in a set of letters and replace them with the new set. A common use case is to convert lowercase letters to uppercase letters. Note : tr takes the text that you will convert from a pipe. We don't cover pipes in this video but here is an instructive video on them. 1 2 %%bash echo \"aaaaaBBBCCCC\" | tr \"a\" \"A\" AAAAABBBCCCC The rev command \u00b6 The rev command is a commandline tool that reverses the input lines. For example: 1 2 %%bash echo \"aaaaaBBBCCCC\" | rev CCCCBBBaaaaa Using tr , rev , and echo together \u00b6 We can now echo the sequence we want to convert into the tr command to find the complementary base and then pass it into the rev command to reverse the sequence. 1 2 %%bash echo \"AATGGACCTACACTGTCA\" | tr \"ATGC\" \"TACG\" TTACCTGGATGTGACAGT Processing all sequences \u00b6 We are now armed with the tools to process all of the sequences in our read1.txt file that we generated earlier. 1 2 %%bash cat read1.txt | tr \"ATGC\" \"TACG\" | rev | head CGGACACGATCGTTCTCGACNGATGT AGGGAAAGACTAGCAGTTGGNGCTGA CTACTGATGAACCGCGTGATNTTTCA CCATGATCGATCGTAGCCTGNTGCGC CATTCTCCATGAGAAAGGAGNATCAG GGCTTTCGCACTCTTCACTTNGCTCG AGCTCTAACTTATGCCCTGCNATTCT ACCGAAACGTAGTCGTAACTNGCTGA TTTTGGAAACTGGATGACTGNTGTCA GCCGATGTCCGCGCTAGACTNAAGGT And we can save these seqences as a new file: 1 2 %%bash cat read1.txt | tr \"ATGC\" \"TACG\" | rev > read1_revcomp.txt Summary \u00b6 In summary we learned how to use the awk command along with the modulo ( % ) operator in order to convert a FASTQ file into a text file of just sequences. We then learned how to use the echo , tr , and rev command to find the reverse complement of the sequences in this file.","title":"Common FASTQ file tasks"},{"location":"tutorials/terminal_common_fastq_tasks/#common-fastq-file-tasks","text":"FASTQ files are text files that contain biological sequences, usually nucleotides, and their associated quality scores. Often we'd like to perform various tasks on the files such as: extracting just the sequences, finding the reverse complement tl;dr In this tutorial we introduce more advanced ways to manipulate and interact with FASTQ files","title":"Common FASTQ file tasks"},{"location":"tutorials/terminal_common_fastq_tasks/#downloading-fastq-files-with-curl","text":"We will use the curl command to download FASTQ files to our machine. curl is a command line tool that allows us to download files. It takes a URL as an argument and downloads the file to your local computer in the current directory. FASTQ files usually come in pairs, known as \"read 1\" and \"read 2\". This naming convention originates from the order in which the molecules in a sequencing machine are sequenced. 1 2 3 4 %%bash curl -Ls -o read1.fastq https://caltech.box.com/shared/static/fh81mkceb8ydwma3tlrqfgq22z4kc4nt.gz curl -Ls -o read2.fastq https://caltech.box.com/shared/static/ycxkluj5my7g3wiwhyq3vhv71mw5gmj5.gz ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 23:12 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 23:11 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data The curl command uses three options: -L tells curl to follow any redirects in case the file was moved, -s tells curl to not print any logging information (i.e. the command is silent), and the -o specifies the new name of the file to be saved to our machine.","title":"Downloading FASTQ files with curl"},{"location":"tutorials/terminal_common_fastq_tasks/#printing-out-only-sequences","text":"Often times we care only about the sequences in the FASTQ files and nothing else. We are tasked with converting the FASTQ file into just a file of sequences. Recall that a FASTQ file is comprised of sequences of molecules and associated metadata. Each molecule is represented by four lines: 1 2 3 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The first line is the molecule identifier, the second line is the actual sequence of the molecule, the third line starts with a + sign and provides optional information, and the fourth line is the quality score of the sequence. Note that the quality score must be the same length of the molecule. So we need to figure out a way to print the sequence (line 2) and every 4 lines after that.","title":"Printing out only sequences"},{"location":"tutorials/terminal_common_fastq_tasks/#the-awk-command","text":"The awk command is a commandline tool for advanced processing of text files. It can perform many tasks and we will use it for printing out only the sequences from the FASTQ files. awk operates on a line-by-line basis and treats each line as a collection of \"columns\" separated by a \"separator\" such as a space, a comma, or a tab. In the simplest case we can print out every line input to awk by printing the 0th column: 1 awk '{print $0}' file.txt Let's use it on our FASTQ files. If you recall, a fastq file that has not been compressed with gzip is simply a text file. Since we don't want the entire contents of the file to be printed to the screen, we can limit the number of lines with the head command. 1 2 %%bash awk '{print $0}' read1.fastq | head -n 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The awk command also has a built-in variable called NR . This variable stores the current line number. We can also print it out: 1 2 %%bash awk '{print NR, $0}' read1.fastq | head -n 12 1 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 2 ACATCNGTCGAGAACGATCGTGTCCG 3 +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 4 AAAAA#EEEEEEEEEEEEEEEEEEEE 5 @SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 6 TCAGCNCCAACTGCTAGTCTTTCCCT 7 +SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 8 AAAAA#EEEEEE6EEEEEEEEEEEEE 9 @SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 10 TGAAANATCACGCGGTTCATCAGTAG 11 +SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 12 AAAAA#EEEAEEEEEEEAEEEEEEEE","title":"The awk command"},{"location":"tutorials/terminal_common_fastq_tasks/#the-modulo-operator","text":"Notice how the sequence of interest occurs on the 2nd line and then again on the 6th line and then again on the 10th line. The sequences are spaced four lines apart and start on line 2. We can be clever and print out only those lines using the modulo % operator. The modulo operator is the same as seen in python. Given two numbers a and b , the operation a%b first divides a by b and then returns the remainder. For example: 1 2 3 4 5 %%python a = 17 b = 4 print(f\"{a}/{b} = {a//b} with a remainder of {a%b}.\") print(f\"In other words: {b}*{a//b} + {a%b} = {a}.\") 17/4 = 4 with a remainder of 1. In other words: 4*4 + 1 = 17. To get every 4th line of the file we want to print out the lines when NR%4==0 . We can declare the condition to print the line by writing the condition before the {print} in the following way: 1 awk '(condition){print $0}' file.txt Let's try it on our file: 1 2 %%bash awk 'NR%4==0{print NR, $0}' read1.fastq | head -n 6 4 AAAAA#EEEEEEEEEEEEEEEEEEEE 8 AAAAA#EEEEEE6EEEEEEEEEEEEE 12 AAAAA#EEEAEEEEEEEAEEEEEEEE 16 AAAAA#EEEEEEEEEEEEEEEEEEEE 20 AAAAA#EEEEEEEEEEAEEEEEEEEE 24 AAA6A#EEEEAEEEAEE6EEEEEEEE Notice that this gives us the rows 4, 8, 12... , i.e. the quality score. We need to shift the condition by 2 so that we get the sequence instead: 1 2 %%bash awk 'NR%4==2{print NR, $0}' read1.fastq | head -n 6 2 ACATCNGTCGAGAACGATCGTGTCCG 6 TCAGCNCCAACTGCTAGTCTTTCCCT 10 TGAAANATCACGCGGTTCATCAGTAG 14 GCGCANCAGGCTACGATCGATCATGG 18 CTGATNCTCCTTTCTCATGGAGAATG 22 CGAGCNAAGTGAAGAGTGCGAAAGCC","title":"The modulo (%) operator"},{"location":"tutorials/terminal_common_fastq_tasks/#saving-the-sequences-to-a-file","text":"Now if we want to save this as a new file we can direct the stream of text to a new file like so: 1 2 %%bash awk 'NR%4==2{print $0}' read1.fastq > read1.txt","title":"Saving the sequences to a file"},{"location":"tutorials/terminal_common_fastq_tasks/#finding-the-reverse-complement","text":"DNA (Dexoy-riboNucleic Acid) is a two-stranded biopolymer where each monormer is one of the four nucleotides Adenosine ( A ) Thymine ( T ) Guanine ( G ) Cytosine ( C ). The strands have a directionality, commonly called to as the 3' and 5' ends which refers to the position of the carbon atoms in the pentose-sugar-ring. The 5' -carbon usually has a phosphate group attached to it and the 3' -carbon end usually has a hydroxyl ( OH ) group group attached to it. The nucleotides bind complementarily and run anti-parallel to each other. Here is an example: 1 2 3 5' - A A T G G A C C T A C A C T G T C A - 3' | | | | | | | | | | | | | | | | | | 3' - T T A C C T G G A T G T G A C A G T - 5' Often bioinformaticians want to know the the reverse complement of a given sequence.","title":"Finding the reverse complement"},{"location":"tutorials/terminal_common_fastq_tasks/#relevant-commands","text":"To find the reverse complement we will use two commands, echo and tr .","title":"Relevant commands"},{"location":"tutorials/terminal_common_fastq_tasks/#the-echo-command","text":"The echo command is a commandline tool that allows us to \"print\" whatever argument was supplied to it. For example: 1 2 %%bash echo \"Hello world\" Hello world","title":"The echo command"},{"location":"tutorials/terminal_common_fastq_tasks/#the-tr-command","text":"The tr command is a commandline tool that is commonly referred to as the \"translate\" command. It will take in a set of letters and replace them with the new set. A common use case is to convert lowercase letters to uppercase letters. Note : tr takes the text that you will convert from a pipe. We don't cover pipes in this video but here is an instructive video on them. 1 2 %%bash echo \"aaaaaBBBCCCC\" | tr \"a\" \"A\" AAAAABBBCCCC","title":"The tr command"},{"location":"tutorials/terminal_common_fastq_tasks/#the-rev-command","text":"The rev command is a commandline tool that reverses the input lines. For example: 1 2 %%bash echo \"aaaaaBBBCCCC\" | rev CCCCBBBaaaaa","title":"The rev command"},{"location":"tutorials/terminal_common_fastq_tasks/#using-tr-rev-and-echo-together","text":"We can now echo the sequence we want to convert into the tr command to find the complementary base and then pass it into the rev command to reverse the sequence. 1 2 %%bash echo \"AATGGACCTACACTGTCA\" | tr \"ATGC\" \"TACG\" TTACCTGGATGTGACAGT","title":"Using tr, rev, and echo together"},{"location":"tutorials/terminal_common_fastq_tasks/#processing-all-sequences","text":"We are now armed with the tools to process all of the sequences in our read1.txt file that we generated earlier. 1 2 %%bash cat read1.txt | tr \"ATGC\" \"TACG\" | rev | head CGGACACGATCGTTCTCGACNGATGT AGGGAAAGACTAGCAGTTGGNGCTGA CTACTGATGAACCGCGTGATNTTTCA CCATGATCGATCGTAGCCTGNTGCGC CATTCTCCATGAGAAAGGAGNATCAG GGCTTTCGCACTCTTCACTTNGCTCG AGCTCTAACTTATGCCCTGCNATTCT ACCGAAACGTAGTCGTAACTNGCTGA TTTTGGAAACTGGATGACTGNTGTCA GCCGATGTCCGCGCTAGACTNAAGGT And we can save these seqences as a new file: 1 2 %%bash cat read1.txt | tr \"ATGC\" \"TACG\" | rev > read1_revcomp.txt","title":"Processing all sequences"},{"location":"tutorials/terminal_common_fastq_tasks/#summary","text":"In summary we learned how to use the awk command along with the modulo ( % ) operator in order to convert a FASTQ file into a text file of just sequences. We then learned how to use the echo , tr , and rev command to find the reverse complement of the sequences in this file.","title":"Summary"},{"location":"tutorials/terminal_interacting_with_fastq_files/","text":"Interacting with FASTQ files \u00b6 FASTQ files are text files that contain biological sequences, usually nucleotides, and their associated quality scores. The quality score is a measure of how accurate the base-call is for each letter in the sequence. For more information please see the wikipedia entry . tl;dr In this tutorial we introduce ways to interact with FASTQ files by the command line. The curl command \u00b6 We will use the curl command to download FASTQ files to our machine. curl is a command line tool that allows us to download files. It takes a URL as an argument and downloads the file to your local computer in the current directory. For most cases when downloading data with curl we will use the following syntax: 1 curl -Ls -o outputfile.txt http://www.somewebsite.com/myfile.txt Where the -L tells the command to follow \"redirects\" in case the file as been moved, -s tells the command to be silent and the -o tells the command the name of the file to be saved. Downloading FASTQ files \u00b6 FASTQ files usually come in pairs. They are coloquially called \"read 1\" and \"read 2\". This naming refers to the order in which the molecules were sequenced. We won't cover the many ways in which FASTQ files can be generated in this tutorial but for more details please check out these resources: Illumina documentation , Next Generation Sequencing Core @UPenn . 1 2 3 4 %%bash curl -Ls -o read1.fastq https://caltech.box.com/shared/static/fh81mkceb8ydwma3tlrqfgq22z4kc4nt.gz curl -Ls -o read2.fastq https://caltech.box.com/shared/static/ycxkluj5my7g3wiwhyq3vhv71mw5gmj5.gz ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 06:55 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 06:55 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data Interacting with FASTQ files \u00b6 FASTQ files can be quite large, often on the order of tens to hundreds of gigabytes, therefore it is impractical to open them up and view them in a text editor. For this reason FASTQ files are often \"compressed\" to save storage space. The type of compression is colloquially called \"gzip\" compression to refer to the command line tool that compresses files. Useful commands \u00b6 The gzip command and the gunzip command \u00b6 Often times FASTQ files end with .fastq.gz . This means that they have been compressed with the gzip command. They can be decompressed them with the gunzip command. Though most of the time we don't want to decompress them since that would require a lot of space. The syntax for decompressing and compressing a file in most cases will look like the following: 1 2 gunzip file.fastq.gz gzip file.fastq Our files are currently decompressed. Let's see how much space we save by compressing them. 1 2 3 4 5 %%bash ls -lht gzip read1.fastq gzip read2.fastq ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 06:55 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 06:55 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data total 74M -rw-r--r-- 1 root root 47M Jan 5 06:55 read2.fastq.gz -rw-r--r-- 1 root root 28M Jan 5 06:55 read1.fastq.gz drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data The read1 FASTQ file went from 188 Megabytes in size (decompressed, read1.fastq ) to 28 Megabytes in size (compressed, read1.fastq.gz ) and the read2 FASTQ file went from 247 Megabytes (decompressed, read2.fastq ) to 47 Megabytes (compressed, read2.fastq.gz ). The read1 file was compressed by a factor of 6.7 and the read2 file was compressed by a factor of 5.2. The zcat command \u00b6 Since we almost always want to keep our FASTQ files compressed but we still want to be able to read them we will use a modified version of the cat command but for files that have been compressed with gzip . The zcat command does exactly the same thing to a file as the cat , namely it prints the contents of the file to the screen. The difference, however is that the zcat command expects a compressed file. The syntax looks like this: 1 zcat file.fastq.gz Reading FASTQ files \u00b6 If we simply use zcat as above it will print the whole file to the screen so instead we \"pipe\" the output of the zcat command to the head command. We don't conver pipes in this video but there are a lot of great resources covering them. Here is a nice video explaining pipes. The head command just stops the process of printing after a certain number of lines. The default is 10 lines. 1 2 %%bash zcat read1.fastq.gz | head @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE @SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 TCAGCNCCAACTGCTAGTCTTTCCCT +SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 AAAAA#EEEEEE6EEEEEEEEEEEEE @SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 TGAAANATCACGCGGTTCATCAGTAG We can change the number of lines printed by head by specifying a -n option: 1 2 %%bash zcat read1.fastq.gz | head -n 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE FASTQ Format \u00b6 Every four lines in a FASTQ file represent one molecule that was sequenced. 1 2 3 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The first line is the molecule identifier, the second line is the actual sequence of the molecule, the third line starts with a + sign and provides optional information, and the fourth line is the quality score of the sequence. Note that the quality score must be the same length of the molecule. To learn more about quality scores please check out the Illumina documentation . Counting the number of molecules (reads) \u00b6 A common task for bioinformaticians is to count the number of reads (also known as the number of molecules) in a FASTQ file. This means we need to count the number of lines in the FASTQ file and then divide by four, since a read is represented by four lines. We will use the wc command to count the number of lines in a file. The wc command is a commandline tool to count the number of words, characters, and lines in a file. The syntax for counting lines in a file is the following: 1 wc -l myfile.txt We will use the wc command to count the number of lines in the FASTQ file and then we will divide by four to get the number of reads. 1 2 3 %%bash zcat read1.fastq.gz | wc -l zcat read2.fastq.gz | wc -l 4000000 4000000 Both read1 and read2 have 4,000,000 lines, this means that they have 1 million reads. For \"paired-end\" sequencing data where read 1 and read 2 are given, both FASTQ files will always have the same number of reads since sequneces from a single molecule are represented in both files. Finding an exact sequence \u00b6 Another common task for bioinformaticians is to find an exact sequence in the FASTQ files. We will use the grep command along with the zcat command. The grep command is a commandline tool that enables searching. The grep command can get complicated but most use cases can be covered by the following syntax: 1 grep \"find this\" myfile.txt Let's find the sequence ATTAGGAGCCG in read1.fastq.gz . 1 2 %%bash zcat read2.fastq.gz | grep \"ATTAGGAGCCG\" GAAGATGTTGTCGTGGATACTGAAATGCGTCGTCAAAAATTAGGAGCCGTTCTTTTG GTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCG GCGTCGTCAAAAATTAGGAGCCGTTGGTTTGAAGAATCTTTTTTCTAATGGAAAGTG GCGTCGTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTC CAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCGGA Number lines of a FASTQ file \u00b6 In the above example we found five reads that contain our sequence of interest but we don't know what line number they came from. We can figure this out by using the nl command. The nl command is a commandline tool to add line numbers to the file. The syntax is as follows: 1 nl file.txt Let's find out the line numbers where we found our sequence. 1 2 %%bash zcat read2.fastq.gz | nl | grep \"ATTAGGAGCCG\" 535046 GAAGATGTTGTCGTGGATACTGAAATGCGTCGTCAAAAATTAGGAGCCGTTCTTTTG 745522 GTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCG 818990 GCGTCGTCAAAAATTAGGAGCCGTTGGTTTGAAGAATCTTTTTTCTAATGGAAAGTG 1654078 GCGTCGTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTC 1956810 CAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCGGA Summary \u00b6 In this tutorial we learned how to interact with FASTQ files using built in shell commands to perform simple tasks.","title":"Interacting with FASTQ files"},{"location":"tutorials/terminal_interacting_with_fastq_files/#interacting-with-fastq-files","text":"FASTQ files are text files that contain biological sequences, usually nucleotides, and their associated quality scores. The quality score is a measure of how accurate the base-call is for each letter in the sequence. For more information please see the wikipedia entry . tl;dr In this tutorial we introduce ways to interact with FASTQ files by the command line.","title":"Interacting with FASTQ files"},{"location":"tutorials/terminal_interacting_with_fastq_files/#the-curl-command","text":"We will use the curl command to download FASTQ files to our machine. curl is a command line tool that allows us to download files. It takes a URL as an argument and downloads the file to your local computer in the current directory. For most cases when downloading data with curl we will use the following syntax: 1 curl -Ls -o outputfile.txt http://www.somewebsite.com/myfile.txt Where the -L tells the command to follow \"redirects\" in case the file as been moved, -s tells the command to be silent and the -o tells the command the name of the file to be saved.","title":"The curl command"},{"location":"tutorials/terminal_interacting_with_fastq_files/#downloading-fastq-files","text":"FASTQ files usually come in pairs. They are coloquially called \"read 1\" and \"read 2\". This naming refers to the order in which the molecules were sequenced. We won't cover the many ways in which FASTQ files can be generated in this tutorial but for more details please check out these resources: Illumina documentation , Next Generation Sequencing Core @UPenn . 1 2 3 4 %%bash curl -Ls -o read1.fastq https://caltech.box.com/shared/static/fh81mkceb8ydwma3tlrqfgq22z4kc4nt.gz curl -Ls -o read2.fastq https://caltech.box.com/shared/static/ycxkluj5my7g3wiwhyq3vhv71mw5gmj5.gz ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 06:55 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 06:55 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data","title":"Downloading FASTQ files"},{"location":"tutorials/terminal_interacting_with_fastq_files/#interacting-with-fastq-files_1","text":"FASTQ files can be quite large, often on the order of tens to hundreds of gigabytes, therefore it is impractical to open them up and view them in a text editor. For this reason FASTQ files are often \"compressed\" to save storage space. The type of compression is colloquially called \"gzip\" compression to refer to the command line tool that compresses files.","title":"Interacting with FASTQ files"},{"location":"tutorials/terminal_interacting_with_fastq_files/#useful-commands","text":"","title":"Useful commands"},{"location":"tutorials/terminal_interacting_with_fastq_files/#the-gzip-command-and-the-gunzip-command","text":"Often times FASTQ files end with .fastq.gz . This means that they have been compressed with the gzip command. They can be decompressed them with the gunzip command. Though most of the time we don't want to decompress them since that would require a lot of space. The syntax for decompressing and compressing a file in most cases will look like the following: 1 2 gunzip file.fastq.gz gzip file.fastq Our files are currently decompressed. Let's see how much space we save by compressing them. 1 2 3 4 5 %%bash ls -lht gzip read1.fastq gzip read2.fastq ls -lht total 434M -rw-r--r-- 1 root root 247M Jan 5 06:55 read2.fastq -rw-r--r-- 1 root root 188M Jan 5 06:55 read1.fastq drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data total 74M -rw-r--r-- 1 root root 47M Jan 5 06:55 read2.fastq.gz -rw-r--r-- 1 root root 28M Jan 5 06:55 read1.fastq.gz drwxr-xr-x 1 root root 4.0K Dec 21 17:29 sample_data The read1 FASTQ file went from 188 Megabytes in size (decompressed, read1.fastq ) to 28 Megabytes in size (compressed, read1.fastq.gz ) and the read2 FASTQ file went from 247 Megabytes (decompressed, read2.fastq ) to 47 Megabytes (compressed, read2.fastq.gz ). The read1 file was compressed by a factor of 6.7 and the read2 file was compressed by a factor of 5.2.","title":"The gzip command and the gunzip command"},{"location":"tutorials/terminal_interacting_with_fastq_files/#the-zcat-command","text":"Since we almost always want to keep our FASTQ files compressed but we still want to be able to read them we will use a modified version of the cat command but for files that have been compressed with gzip . The zcat command does exactly the same thing to a file as the cat , namely it prints the contents of the file to the screen. The difference, however is that the zcat command expects a compressed file. The syntax looks like this: 1 zcat file.fastq.gz","title":"The zcat command"},{"location":"tutorials/terminal_interacting_with_fastq_files/#reading-fastq-files","text":"If we simply use zcat as above it will print the whole file to the screen so instead we \"pipe\" the output of the zcat command to the head command. We don't conver pipes in this video but there are a lot of great resources covering them. Here is a nice video explaining pipes. The head command just stops the process of printing after a certain number of lines. The default is 10 lines. 1 2 %%bash zcat read1.fastq.gz | head @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE @SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 TCAGCNCCAACTGCTAGTCTTTCCCT +SRR8611943.2 NS500272:478:HVL5HBGX5:1:11101:20079:1043 length=26 AAAAA#EEEEEE6EEEEEEEEEEEEE @SRR8611943.3 NS500272:478:HVL5HBGX5:1:11101:10651:1043 length=26 TGAAANATCACGCGGTTCATCAGTAG We can change the number of lines printed by head by specifying a -n option: 1 2 %%bash zcat read1.fastq.gz | head -n 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE","title":"Reading FASTQ files"},{"location":"tutorials/terminal_interacting_with_fastq_files/#fastq-format","text":"Every four lines in a FASTQ file represent one molecule that was sequenced. 1 2 3 4 @SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 ACATCNGTCGAGAACGATCGTGTCCG +SRR8611943.1 NS500272:478:HVL5HBGX5:1:11101:9611:1040 length=26 AAAAA#EEEEEEEEEEEEEEEEEEEE The first line is the molecule identifier, the second line is the actual sequence of the molecule, the third line starts with a + sign and provides optional information, and the fourth line is the quality score of the sequence. Note that the quality score must be the same length of the molecule. To learn more about quality scores please check out the Illumina documentation .","title":"FASTQ Format"},{"location":"tutorials/terminal_interacting_with_fastq_files/#counting-the-number-of-molecules-reads","text":"A common task for bioinformaticians is to count the number of reads (also known as the number of molecules) in a FASTQ file. This means we need to count the number of lines in the FASTQ file and then divide by four, since a read is represented by four lines. We will use the wc command to count the number of lines in a file. The wc command is a commandline tool to count the number of words, characters, and lines in a file. The syntax for counting lines in a file is the following: 1 wc -l myfile.txt We will use the wc command to count the number of lines in the FASTQ file and then we will divide by four to get the number of reads. 1 2 3 %%bash zcat read1.fastq.gz | wc -l zcat read2.fastq.gz | wc -l 4000000 4000000 Both read1 and read2 have 4,000,000 lines, this means that they have 1 million reads. For \"paired-end\" sequencing data where read 1 and read 2 are given, both FASTQ files will always have the same number of reads since sequneces from a single molecule are represented in both files.","title":"Counting the number of molecules (reads)"},{"location":"tutorials/terminal_interacting_with_fastq_files/#finding-an-exact-sequence","text":"Another common task for bioinformaticians is to find an exact sequence in the FASTQ files. We will use the grep command along with the zcat command. The grep command is a commandline tool that enables searching. The grep command can get complicated but most use cases can be covered by the following syntax: 1 grep \"find this\" myfile.txt Let's find the sequence ATTAGGAGCCG in read1.fastq.gz . 1 2 %%bash zcat read2.fastq.gz | grep \"ATTAGGAGCCG\" GAAGATGTTGTCGTGGATACTGAAATGCGTCGTCAAAAATTAGGAGCCGTTCTTTTG GTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCG GCGTCGTCAAAAATTAGGAGCCGTTGGTTTGAAGAATCTTTTTTCTAATGGAAAGTG GCGTCGTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTC CAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCGGA","title":"Finding an exact sequence"},{"location":"tutorials/terminal_interacting_with_fastq_files/#number-lines-of-a-fastq-file","text":"In the above example we found five reads that contain our sequence of interest but we don't know what line number they came from. We can figure this out by using the nl command. The nl command is a commandline tool to add line numbers to the file. The syntax is as follows: 1 nl file.txt Let's find out the line numbers where we found our sequence. 1 2 %%bash zcat read2.fastq.gz | nl | grep \"ATTAGGAGCCG\" 535046 GAAGATGTTGTCGTGGATACTGAAATGCGTCGTCAAAAATTAGGAGCCGTTCTTTTG 745522 GTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCG 818990 GCGTCGTCAAAAATTAGGAGCCGTTGGTTTGAAGAATCTTTTTTCTAATGGAAAGTG 1654078 GCGTCGTCAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTC 1956810 CAAAAATTAGGAGCCGTTCTTTTGAAGACTCTTGTTTCTCTTGGAAAGTCTCTCGGA","title":"Number lines of a FASTQ file"},{"location":"tutorials/terminal_interacting_with_fastq_files/#summary","text":"In this tutorial we learned how to interact with FASTQ files using built in shell commands to perform simple tasks.","title":"Summary"}]}